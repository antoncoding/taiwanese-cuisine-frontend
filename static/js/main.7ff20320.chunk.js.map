{"version":3,"sources":["Components/Compare/utils.js","Components/Compare/index.js","App.js","serviceWorker.js","index.js"],"names":["writeDB","indexA","indexB","result","a","console","log","list","name","url","chooseFromList","targetList","Math","floor","random","length","removeFromList","item","filter","element","Compare","useState","done","setDone","indexList","updateIndexList","optionAIdx","setOptionAIdx","optionBIdx","setOptionBIdx","useMemo","initIndexs","Array","from","keys","push","sort","slice","b","_list","style","paddingTop","textAlign","padding","display","maxWidth","src","foodList","disabled","theme","onClick","newOptionB","newOptionA","App","path","children","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ff20320.chunk.js","sourcesContent":["export const writeDB = async (indexA, indexB, result, user = 'testuser') => {\n  console.log(`write entry to db: ${indexA} vs ${indexB} => ${result}`);\n};\n\nexport const list = [\n  {\n    name: '米粉湯',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '貢丸湯',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '雞排',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '大腸包小腸',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '茶葉蛋',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '蔥抓餅加蛋',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '鹹水雞',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '鹽酥雞',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '地瓜球',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '蚵仔煎',\n    url: 'https://place-hold.it/300x200',\n  },\n  {\n    name: '火雞肉飯',\n    url: 'https://place-hold.it/300x200',\n  },\n];\n","import React, { useState, useMemo } from 'react';\nimport { Card, CardHeader, CardTitle, CardImg, CardBody, Button } from 'shards-react';\nimport { list as foodList, writeDB } from './utils'\n\nfunction chooseFromList (targetList) {\n  const random = targetList[Math.floor(Math.random()*targetList.length)]\n  return random\n}\n\nfunction removeFromList (list, item) {\n  return list.filter(element => element !==item)\n}\n\nfunction initialAB (indexs) {\n  const shuffled = indexs.sort(() => 0.5 - Math.random());\n  let selected = shuffled.slice(0, 2);\n  return selected\n}\n\nfunction Compare() {\n  \n  const [done, setDone] = useState(false)\n  const [indexList, updateIndexList] = useState([])\n  const [optionAIdx, setOptionAIdx] = useState(0)\n  const [optionBIdx, setOptionBIdx] = useState(0)\n\n  useMemo(()=>{\n    const initIndexs = Array.from(Array(10).keys())\n    initIndexs.push(0)\n    const [a, b] = initialAB(initIndexs)\n    console.log(a, b)\n    setOptionAIdx(a)\n    setOptionBIdx(b)\n    let _list = removeFromList(initIndexs, a)\n    _list = removeFromList(_list, b)\n    updateIndexList(_list)\n  },[])\n\n  const onClickOptionA = () => {\n    writeDB(optionAIdx, optionBIdx, optionAIdx)\n    if(indexList.length === 0) {\n      setDone(true)\n      return;\n    }\n    const newOptionB = chooseFromList(indexList)\n    const _list = removeFromList(indexList, newOptionB)\n    updateIndexList(_list)\n    setOptionBIdx(newOptionB)\n  }\n\n  const onClickOptionB = () => {\n    writeDB(optionAIdx, optionBIdx, optionBIdx)\n    if(indexList.length === 0) {\n      setDone(true)\n      return;\n    }\n    const newOptionA = chooseFromList(indexList)\n    const _list = removeFromList(indexList, newOptionA)\n    updateIndexList(_list)\n    setOptionAIdx(newOptionA)\n  }\n\n\n  return (\n    <>\n      <div style={{ paddingTop: '6%', textAlign: 'center' }}>\n        <h3>哪個好吃？</h3>\n      </div>\n      <div style={{ textAlign: 'center' }}>\n        <div style={{ padding: '3%', display: 'inline-block'}}>\n          <Card style={{ maxWidth: '300px' }}>\n            <CardHeader>選項一</CardHeader>\n            <CardImg src='https://place-hold.it/300x200' />\n            <CardBody>\n              <CardTitle>{foodList[optionAIdx].name}</CardTitle>\n              <Button disabled={done} theme='success' onClick={onClickOptionA} > Vote </Button>\n            </CardBody>\n          </Card>\n        </div>\n        <div style={{ padding: '3%', display: 'inline-block'}}>\n          <Card style={{ maxWidth: '300px' }} >\n            <CardHeader>選項二</CardHeader>\n            <CardImg src='https://place-hold.it/300x200' />\n            <CardBody>\n              <CardTitle>{foodList[optionBIdx].name}</CardTitle>\n              <Button disabled={done} theme='success' onClick={onClickOptionB} > Vote </Button>\n            </CardBody>\n          </Card>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Compare;\n","import React from 'react';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Compare from './Components/Compare'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n          <Route path='/compare' children={<Compare/>} />\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}